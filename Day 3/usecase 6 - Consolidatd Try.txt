Step 0:
Download Maven - https://maven.apache.org/download.cgi
Download Eclipse - https://www.eclipse.org/downloads/

For Windows Installation

JDK Installation -https://www.oracle.com/java/technologies/javase-jdk16-downloads.html
Maven Installation - http://maven.apache.org , Download the Zip and Extract to directory
Open GitBash Environment

Step 1

Create workspace directoy
mkdir workspace
cd workspace

Step 2 
Generate the Helidon MP Project

mvn -U archetype:generate -DinteractiveMode=false \
    -DarchetypeGroupId=io.helidon.archetypes \
    -DarchetypeArtifactId=helidon-quickstart-mp \
    -DarchetypeVersion=2.3.0 \
    -DgroupId=io.helidon.examples \
    -DartifactId=helidon-quickstart-mp \
    -Dpackage=io.helidon.examples.quickstart.mp


Step 3
verify check
cd helidon-quickstart-mp
mvn package
java -jar target/helidon-quickstart-mp.jar


Step 4
Open Git Bash
curl http://localhost:8080/greet
Press ctlc -c to stop. 
Verify Helidon MP version.


Step 5
Now Lets work for Eclipse
open the workspace.
Click Launch
File -Import Menu --> Existing Maven Projects - Click Next- Choose Helidon-quickstart-Mp - Select pom.xml--click finish

If any resolve issues -ignore -click finish
Windows - Preferences - Maven- Errors -
Verify Plugin Execution not covered by Lifecycle --> Set to Warning.

Step 6
Eclipse will take time to open up.
Explore Filesystems and Resources..
Expand Meta-Info and open microprofile-config.properties

Step 7
File New --> Class under src/main/java 

package io.helidon.examples.quickstart.mp;

import io.helidon.microprofile.server.Server;
import java.io.IOException;

public final class Main {

    private Main() { }

    public static void main(final String[] args) throws IOException {
        Server server = startServer();
        System.out.println("http://localhost:" + server.port() + "/greet");
    }

    static Server startServer() {
        return Server.builder()
            .build()
            .start();
    }
}

Step 8

Now Eclipse can simply start the application using the Main.class. (Right click on Main.java and select Run->Java Application)

Any Security Popups - Allow Popups.

After using the default config file now customise the configuration on both projects.

Step 9
For Configuration

First for MP project create the mp-config.yaml config file in the resources folder. Right click on src/main/resources and select New->Other...
General-File..
Type mp-config.yaml as name.

Edit the below

app:
 greeting: "Hello Helidon MP from YAML config"

Save the file.


Step 10
In the MP project open the io.helidon.examples.quickstart.mp.Main class and add a new buildConfig method which reads the new config file.

private static Config buildConfig() {
    return Config.builder()
        .disableEnvironmentVariablesSource()
        .sources(
            classpath("mp-config.yaml").optional(),
            classpath("META-INF/microprofile-config.properties"))
        .build();
}

Step 11
Add the below import packages:

import io.helidon.config.Config;
import static io.helidon.config.ConfigSources.classpath;

Edit Server.bulder() to below under startServer():

return Server.builder()
    	        .config(buildConfig())
    	        .build()
    	        .start();

Step 12

Run the application

Open the browser:
check the result at: http://localhost:8080/greet

open the browser
check the result at http://localhost:8080/metrics


Step 13
Open Git Bash
curl -s -H 'Accept: application/json' -X GET http://localhost:8080/metrics/

In browser or Bash

A base set of metrics, available at /metrics/base, as specified by the MicroProfile Metrics specification.

A set of Helidon-specific metrics, available at /metrics/vendor 
Check the plain text result using browser: http://localhost:8080/metrics/vendor


Step 14

Now Lets add a Custom metrics 


Add custom metrics
In case of MP it is basically just an annotation. Add the following annotation to the getDefaultMessage method in the io.helidon.examples.quickstart.mp.GreetResource class.

 @Counted(name = "cardCount", absolute = true) 
 @Metered(name = "cardMeter", absolute = true, unit = MetricUnits.MILLISECONDS) 
 @Timed(name = "cardTimer", absolute = true, unit = MetricUnits.MILLISECONDS)
 public JsonObject getDefaultMessage() {
        return createResponse("World");
    }



import org.eclipse.microprofile.metrics.MetricUnits;
import org.eclipse.microprofile.metrics.annotation.Counted;
import org.eclipse.microprofile.metrics.annotation.Metered;
import org.eclipse.microprofile.metrics.annotation.Timed;




Fix the Project Setup.
Run the project application.

Step 15

Keep visiting - http://localhost:8080/greet


Open Browser
http://localhost:8080/metrics/application/cardCount

Another metric types also available for Prometheus about the configured method. You can check at 

http://localhost:8080/metrics/application/io.helidon.examples.quickstart.mp.GreetResource.getDefaultMessage. These are history/summary and gauge type metrics.

Step 16

It’s a good practice to monitor your microservice’s health, to ensure that it is available and performs correctly.

Check built-in health status at http://localhost:8080/health. The result should have similar:


Step 17
Add Liveness Health Check

A typical health check combines the statuses of all the dependencies that affect availability and the ability to perform correctly:

network latency
storage
database
other services used by your application


Now Lets Explore more on checks:

MicroProfile Health supports two types of health checks:

Liveness checks report whether the runtime environment in which the service is running is sufficient to support the work the service performs. The environment is beyond the control of the service itself and typically cannot improve without outside intervention. If a microservice instance reports a DOWN liveness check, it should never report UP later. It will need to be stopped and a replacement instance created.

Readiness checks report whether the service is currently capable of performing its work. A service that reports DOWN for its readiness cannot at the moment do its job, but at some future point it might become able to do so without requiring a restart.


To add custom liveness health check create a new class called GreetLivenessCheck in io.helidon.examples.quickstart.mp package. (To create new class right click on the io.helidon.examples.quickstart.mp package under the helidon-quickstart-mp project in the left Project Explorer area and select New->Class menu item. Type the class name: GreetLivenessCheck and click OK.) Copy the the content below into the new class.
package io.helidon.examples.quickstart.mp;

package io.helidon.examples.quickstart.mp;

import javax.enterprise.context.ApplicationScoped;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Liveness;

@Liveness 
@ApplicationScoped 
public class GreetLivenessCheck implements HealthCheck {
  private GreetingProvider provider;

  @Override
  public HealthCheckResponse call() {
    return HealthCheckResponse.named("LivenessCheck")  
        .up()
        .withData("time", System.currentTimeMillis())
        .build();
  }
}

Step 18
Stop and Run the application

Verify Health - http://localhost:8080/health
--Verify MyUPLiveness Check with State , Status and time.

Step 19

Now Lets do Readiness check.

To add custom readiness health check create a new class called GreetReadinessCheck in io.helidon.examples.quickstart.mp package. (To create new class right click on the io.helidon.examples.quickstart.mp package under the helidon-quickstart-mp project in the left Project Explorer area and select New->Class menu item. Type the class name: GreetReadinessCheck and click OK.) Copy the the content below into the new class.


package io.helidon.examples.quickstart.mp;

import java.time.Duration; 
import java.util.concurrent.atomic.AtomicLong;
import javax.enterprise.context.ApplicationScoped;

import javax.enterprise.context.Initialized;
import javax.enterprise.event.Observes;
import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Readiness;

@Readiness 
@ApplicationScoped
public class GreetReadinessCheck implements HealthCheck {
  private AtomicLong readyTime = new AtomicLong(0);


  @Override
  public HealthCheckResponse call() {
    return HealthCheckResponse.named("ReadinessCheck")  
        .state(isReady())
        .withData("time", readyTime.get())
        .build();
  }

  public void onStartUp(
      @Observes @Initialized(ApplicationScoped.class) Object init) {
    readyTime = new AtomicLong(System.currentTimeMillis()); 
  }

  /**
   * Become ready after 5 seconds
   *
   * @return true if application ready
   */
  private boolean isReady() {
    return Duration.ofMillis(System.currentTimeMillis() - readyTime.get()).getSeconds() >= 5;
  }
}


Step 20

Verify Health - http://localhost:8080/health
--Verify MyUPReadiness Check with State , Status and time.


Step 21

Now Lets add Rest Client to Services.

In this example MP application will call the SE application's service. This communication is very common in microservices architecture. MicroProfile Rest Client adds the capability to invoke remote microservices using a JAX-RS like interface to declare the operations.

The RegisterRestClient annotation has a property baseUri that can be used to define the base endpoint of this client. In the interface you need to only define the necessary endpoints which is now the /greet/{name}. 
To create new interface right click on the io.helidon.examples.quickstart.mp package under the helidon-quickstart-mp project in the left Project Explorer area and select New->Interface menu item. Type the interface name: GreetRestClient and click OK. Please pay attention, now you need to create interface and not class! Copy the following source in the new interface.


package io.helidon.examples.quickstart.mp;

import javax.json.JsonObject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@RegisterRestClient(baseUri="http://localhost:8080/greet")
interface GreetRestClient {

     @GET
     JsonObject getDefaultMessage();

     @Path("/{name}")
     @GET
     JsonObject getMessage(@PathParam("name") String name);

}


Step 22

Once a rest client interface is annotated, it can be injected into any CDI bean. Open GreetResource.java and add the following part example after the last method:

@Inject
@RestClient
GreetRestClient restClient;

@GET
@Path("/outbound/{name}")
public JsonObject outbound(@PathParam("name") String name) {
   return restClient.getMessage(name);
}
======================
import the below library
import org.eclipse.microprofile.rest.client.inject.RestClient;

Step 23
pom.xml

<dependency>
    <groupId>io.helidon.microprofile.rest-client</groupId>
    <artifactId>helidon-microprofile-rest-client</artifactId>
</dependency>
Fix any Validation (if any).
Stop and Run the project

Open Browser and verify 
http://localhost:8080/greet/outbound/track

POM.xml
=======
  <dependency>
            <groupId>io.helidon.microprofile.bundles</groupId>
            <artifactId>helidon-microprofile</artifactId>
        </dependency>
        
        <dependency>
            <groupId>io.helidon.microprofile.metrics</groupId>
            <artifactId>helidon-microprofile-metrics</artifactId>
        </dependency>
        
        <dependency>
    <groupId>io.helidon.microprofile.rest-client</groupId>
    <artifactId>helidon-microprofile-rest-client</artifactId>
</dependency>
        <dependency>
    <groupId>io.helidon.metrics</groupId>
    <artifactId>helidon-metrics</artifactId>
    <scope>runtime</scope>
</dependency>


Step 24

Tracing:
Helidon includes support for tracing through the OpenTracing APIs. Tracing is integrated with WebServer and Security. Helidon has further integration with Zipkin and Jaeger tracer tools. This lab demonstrates Zipkin usage.

Add dependency in pom.xml 
<dependency>
    <groupId>io.helidon.tracing</groupId>
    <artifactId>helidon-tracing-zipkin</artifactId>
</dependency>

Step 25

Configure the service name here too in the microprofile-config.properties property file which is located under src/main/resources/META-INF folder. Add the following property:

tracing.service=helidon-mp

Step 26

Start Zipkin without docker
open Gitbash
curl -LSs https://raw.githubusercontent.com/nagypeter/helidon-tutorial/master/scripts/setup.zipkin.sh | bash

Windows - https://repo1.maven.org/maven2/io/zipkin/java/zipkin-server/2.12.9/zipkin-server-2.12.9-exec.jar
java -jar zipkin-server-1.30.3-exec.jar

This will start the Zipkin tracer on http://localhost:9411 - this is also the default configuration that Helidon expects.
You can open the dashboard on http://localhost:9411/zipkin/



Step 27

Start run application  from Eclipse. (stop if running and start again)

Now to generate tracing information invoke again the outbound call using the browser
 http://localhost:8080/greet/outbound/Bill

Now open Zipkin to see the tracing information: http://localhost:9411/zipkin/ and on the (default) Find a trace page click the Run Query button. If you have multiple results click Expand All to find easily that which has multiple components in the transaction. Then open the details with Show button.
